import pandas as pd
import os,sys,argparse
import gcsfs

#This script generates replicate to sample mapping file to interpret the qc report. It was developed as an alternative to extract_rep_names_from_encode.sh
#which might not work if the pipeline run_dir had outputs for a specific condition in multiple workflow ids, this happens when a workflow is rerun on gcp,
#where the metadata.json file generated by caper points to the completed paths from failed wfids.
#This script uses the croo.filetable.*.tsv to generate the mapping file

#Usage: python3 encode_rep_names_from_croo.py <gcp_path_to_croo_outputs_without_trailing_slash>
# <gcp_output_bucket_path_with_trailing_slash> <filelist_of_workflow_ids_in_the_batch> <gcp_project>
 
def main(gcp_path,output_path,wfids,gcp_project):
    fs = gcsfs.GCSFileSystem(project=gcp_project)
    out_df = pd.DataFrame()
    wfl = [line.strip() for line in open(wfids, 'r')]
    cond_l=[]
    rep_l=[]
    sample_list=[]
    for i in wfl:
        in_path=gcp_path+"/"+i+"/*/croo.filetable*.tsv"
        f="gs://"+fs.glob(in_path)[0]
        df_in=pd.read_csv(f,sep="\t",header=None)
        filtered=df_in[df_in[0].str.contains("Raw BAM from aligner")]
        cond=f.split("/")[-2]
        for vals in filtered[1]:
            cond_l.append(cond)
            rep=vals.split("/")[-2]
            rep_l.append(rep)
            sample=(vals.split("/")[-1]).split("_R1.trim.bam")[0]
            sample_list.append(sample) 
    out_df[0] = cond_l
    out_df[1] = rep_l
    out_df[2] = sample_list
    out_file=output_path+"rep_to_sample_map.csv"
    out_df.to_csv(out_file,index=False,header=False)
    print("Success! Finished writing the mapping file")

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description = 'This script generates the replicate to sample mapping file to interpret the qc report')
  parser.add_argument('gcp_path',help='location of atac-seq croo outputs',type=str) 
  parser.add_argument('output_path', help='output path, where you want the outputs to be written', type=str)
  parser.add_argument('wfids', help='file containing list of workflow ids,usually all workflows for a specific tissue')
  parser.add_argument('gcp_project', help='file containing list of workflow ids') 
  args = parser.parse_args()
  main(args.gcp_path,args.output_path,args.wfids,args.gcp_project)
