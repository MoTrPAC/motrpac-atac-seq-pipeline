import json
import argparse
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

import requests


def get_status(submission_id):
    res = requests.get(
        f"http://localhost:8000/api/workflows/v1/query",
        params={"id": submission_id, "additionalQueryResultFields": "labels"},
    )
    res_json = res.json()
    wf_metadata = res_json["results"][0]
    status = wf_metadata["status"]
    labels = wf_metadata["labels"]
    return {submission_id: {"status": status, "labels": labels["caper-str-label"]}}


def loop_execution_status(submission_map_fp: str):
    with open(submission_map_fp, "r") as f:
        submission_map = json.load(f)

    first_loop = True
    prev_line_count = 0
    while True:
        status_dict = {}
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = []

            for pair in submission_map:
                f = executor.submit(get_status, pair["workflow_id"])
                futures.append(f)

            for fut in as_completed(futures):
                res_dict = fut.result()
                status_dict.update(res_dict)

        filtered_status_dict = dict(
            filter(lambda elem: elem[1]["status"] != "Succeeded", status_dict.items())
        )
        sorted_status_dict = {
            k: v
            for k, v in sorted(
                filtered_status_dict.items(), key=lambda item: item[1]["status"]
            )
        }
        fmt_status_dict = json.dumps(sorted_status_dict, indent=4)
        if not first_loop:
            print("\033[F" * prev_line_count)
        print(fmt_status_dict)
        first_loop = False
        prev_line_count = len(fmt_status_dict.splitlines()) + 1
        time.sleep(5)


def main():
    parser = argparse.ArgumentParser(
        description="This script renders the execution " "status of the pipeline"
    )
    parser.add_argument(
        "workflow_id_file", help="Workflow ID map, generated by submit.sh", type=str
    )
    args = parser.parse_args()
    try:
        loop_execution_status(args.workflow_id_file)
    except KeyboardInterrupt:
        print("KeyboardInterrupt received, exiting...")
        exit()


if __name__ == "__main__":
    main()
